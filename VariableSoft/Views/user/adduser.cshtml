@model VariableSoft.Models.UserProfile

@{
    ViewBag.Title = ViewBag.Title;
    
}


<link href="~/Content/bootstrap-min-css.css" rel="stylesheet" />
<link href="~/Content/wizard/css/wizard-min.css" rel="stylesheet" />
<link href="~/Content/select2.css" rel="stylesheet" />
<style>
    .term-condition {
        min-height: 252px;
    }
</style>
<h2>@ViewBag.Title</h2>

<div class="container">
    <div class="stepwizard">
        <div class="stepwizard-row setup-panel">
            <div class="stepwizard-step">
                <a href="#step-1" type="button" class="btn btn-primary btn-circle">1</a>
                <p>Personal<br>Information</p>
            </div>
            <div class="stepwizard-step">
                <a href="#step-2" type="button" class="btn btn-default btn-circle" disabled="disabled">2</a>
                <p>Contact<br>Information</p>
            </div>
            <div class="stepwizard-step">
                <a href="#step-3" type="button" class="btn btn-default btn-circle" disabled="disabled">3</a>
                <p>Step 3</p>
            </div>
        </div>
    </div>



    @using (Html.BeginForm("adduser", "user", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", @Id = "frmuser" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model=>model.Logo)
        <div class="row setup-content" id="step-1">
            <div class="col-xs-12">
                <div class="col-md-2">
                    <div class="imageSection">
                        <div class="removeBtn">
                            <span id="closeUpload"><a href="javascript:void(0)" title="Remove Image">X</a></span>
                        </div>
                        @if (Model.Logo != null)
                        {

                            <img id='imagepreview1' class="imagepreview1" src="@Model.Logo" width="150" height="150" aria-disabled="true" />
                        }
                        else
                        {
                            <img class="imagepreview1" width="150" height="150" src="/uploads/NoImage.png" aria-disabled="true" />

                        }
                        
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.UserFullName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserFullName, "", new { @class = "form-control text-box single-line", @required = "required", @type = "text" })
                        @Html.ValidationMessageFor(model => model.UserFullName)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Email, "", new { @class = "form-control text-box single-line", @required = "required", @type = "email" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Mobile, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Mobile, "", new { @class = "form-control text-box single-line", @required = "required" })
                        @Html.ValidationMessageFor(model => model.Mobile)
                    </div>
                    <div class="form-group">
                        @Html.Label("Photo Upload", new { @class = "control-label" })
                        <input id="file" type="file" name="file" data-val="true" data-val-required="File is required" class="form-control input1" />
                    </div>
                    <a class="btn btn-primary previousBtn btn-lg" href="~/user/userlist">Return</a>
                    <button class="btn btn-primary nextBtn btn-lg pull-right" type="button">Next</button>
                </div>
            </div>
        </div>
        <div class="row setup-content" id="step-2">
            <div class="col-xs-12">
                <div class="col-md-2">

                </div>
                <div class="col-md-6">
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.StateId, new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.StateId, ViewBag.stateddl as List<SelectListItem>, new { @class = "form-control text-box single-line", @type = "text", @required = "required" })
                        @Html.ValidationMessageFor(model => model.StateId)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.DistrictId, new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.DistrictId, ViewBag.districtddl as List<SelectListItem>, new { @class = "form-control text-box single-line", @type = "text", @required = "required" })
                        @Html.ValidationMessageFor(model => model.DistrictId)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Pincode, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Pincode, "", new { @class = "form-control text-box single-line", @required = "required", @type = "text" })
                        @Html.ValidationMessageFor(model => model.Pincode)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CityName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.CityName, "", new { @class = "form-control text-box single-line", @required = "required", @type = "text" })
                        @Html.ValidationMessageFor(model => model.CityName)
                    </div>
                    <a class="btn btn-primary previousBtn btn-lg" href="~/user/userlist">Return</a>
                    <button class="btn btn-primary previousBtn btn-lg" type="button">Previous</button>
                    <button class="btn btn-primary nextBtn btn-lg pull-right" type="button">Next</button>
                </div>
            </div>
        </div>
        <div class="row setup-content" id="step-3">
            <div class="col-xs-12">
                <div class="col-md-2">

                </div>
                <div class="col-md-6">
                    <div class="term-condition">
                        <label class="control-label">I accept the term and conditions.</label>
                        @Html.CheckBox("chkterm", false, new { @id = "chkterm", @class = "form-control", @required = "required" })
                    </div>
                    <a class="btn btn-primary previousBtn btn-lg" href="~/user/userlist">Return</a>
                    <button class="btn btn-primary previousBtn btn-lg" type="button">Previous</button>
                    <button class="btn btn-success btn-lg pull-right" type="submit">Finish!</button>
                </div>
            </div>
        </div>


    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/select2.min.js"></script>
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>*@
<script>
    $(document).ready(function () {
        
        var navListItems = $('div.setup-panel div a'),
                allWells = $('.setup-content'),
                allNextBtn = $('.nextBtn'), allPreviousBtn = $('.previousBtn');

        allWells.hide();

        navListItems.click(function (e) {
            e.preventDefault();
            var $target = $($(this).attr('href')),
                    $item = $(this);

            if (!$item.hasClass('disabled')) {
                navListItems.removeClass('btn-primary').addClass('btn-default');
                $item.addClass('btn-primary');
                allWells.hide();
                $target.show();
                $target.find('input:eq(0)').focus();
            }
        });

        allNextBtn.click(function () {
            var curStep = $(this).closest(".setup-content"),
                curStepBtn = curStep.attr("id"),
                nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                curInputs = curStep.find("input[type='text'],input[type='url']"),
                isValid = true;
            $(".form-group").removeClass("has-error");
            for (var i = 0; i < curInputs.length; i++) {
                if (!curInputs[i].validity.valid) {
                    isValid = false;
                    $(curInputs[i]).closest(".form-group").addClass("has-error");
                }
            }
            if ($(".field-validation-error").length > 0)
            {
                isValid = false;
            }
            
            if (isValid)
                nextStepWizard.removeAttr('disabled').trigger('click');
        });

        allPreviousBtn.click(function () {
            var curStep = $(this).closest(".setup-content"),
                curStepBtn = curStep.attr("id"),
                nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().prev().children("a"),
                curInputs = curStep.find("input[type='text'],input[type='url']"),
                isValid = true;

                nextStepWizard.removeAttr('disabled').trigger('click');
        });

        $('div.setup-panel div a.btn-primary').trigger('click');
    });
    $("#StateId").change(function () {
        var stateData = $(this).val();
        $.ajax({
            type: "GET",
            url: "getdistrictlist",
            data: { value: stateData },
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.length > 0 || result != undefined)
                {
                    $("#DistrictId").empty();
                    $.each(result, function (index, item) {
                        $("#DistrictId").append($('<option/>', {
                            value: item.Value,
                            text: item.Text
                        }));
                        
                    });
                }
            },
            error: function (response) {


            }
        });

    });
    
    $(document).on('submit', '#frmuser', function () {
        if (!$("#chkterm").prop('checked')) {
            return false;
        }
    });
</script>





<script type="text/jscript">
    function GetFileSize(fileid) {
        try {
            var fileSize = 0;
            if ($.browser.msie) {
                var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }
            else
            {
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }
            return fileSize;
        }
        catch (e) {
            alert("Error is :" + e);
        }
    }

    //get file path from client system
    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }
    $(function () {
        $("#file").change(function () {
             
            var file = getNameFromPath($(this).val());
            if (file != null) {
                debugger
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'jpg':
                    case 'png':
                    case 'jpeg':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }
            if (flag == false)
            {
                alert("You can upload only jpg,png extension file");
                $('#NextBtn').prop("disabled", true);
                return false;

            }
            else
            {
                $('#NextBtn').prop("disabled", false);
            }
            if (window.File && window.FileReader && window.FileList && window.Blob)
            {
                var fsize = $('#file')[0].files[0].size;

                if (fsize > 2097152)
                {
                    alert(" File size too large!");
                    $('#NextBtn').prop("disabled", true);
                } else {

                    $('#NextBtn').prop("disabled", false);
                }
            }
            else
            {
                alert("Please upgrade your browser, because your current browser lacks some new features we need!");
            }
        });
    });


    $(document).ready(function ()
    {
        $(".imagepreview1").removeAttr("onclick")
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('.imagepreview1').prop('src', e.target.result).show().addClass('selected');
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $(".input1").change(function () {
            readURL(this);
            $('.imagepreview1').show();
        });

        var orig_src = $('.imagepreview1').prop('src');
        $('#closeUpload').click(function () {
            $('.imagepreview1').attr('src', '/uploads/NoImage.png');
            $(".input1").val("");
            $("#Logo").val("");
        });
    });
</script>
